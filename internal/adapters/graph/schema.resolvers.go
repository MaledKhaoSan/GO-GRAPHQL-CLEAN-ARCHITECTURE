// internal/adapters/graph/schema.resolvers.go
package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.68

// Authors is the resolver for the authors field.
// func (r *queryResolver) Authors(ctx context.Context) ([]*model.Author, error) {
// 	authors, err := r.AuthorUC.GetAuthors(ctx)
// 	if err != nil {
// 		return nil, err
// 	}

// 	var result []*model.Author
// 	for _, a := range authors {
// 		result = append(result, &model.Author{
// 			ID:      strconv.Itoa(a.ID),
// 			Name:    a.Name,
// 			Country: &a.Country,
// 		})
// 	}
// 	return result, nil
// }

// // Author is the resolver for the author field.
// func (r *queryResolver) Author(ctx context.Context, id string) (*model.Author, error) {
// 	panic(fmt.Errorf("not implemented"))
// }

// // Books is the resolver for the books field.
// func (r *queryResolver) Books(ctx context.Context) ([]*model.Book, error) {
// 	// เรียก Usecase
// 	books, err := r.BookUC.GetBooks(ctx)
// 	if err != nil {
// 		return nil, err
// 	}

// 	// Map ไปยัง GraphQL Model
// 	var result []*model.Book
// 	for _, b := range books {
// 		result = append(result, &model.Book{
// 			ID:            strconv.Itoa(b.ID),
// 			Title:         b.Title,
// 			PublishedYear: &b.PublishedYear,
// 		})
// 	}

// 	return result, nil
// }

// // Book is the resolver for the book field.
// func (r *queryResolver) Book(ctx context.Context, id string) (*model.Book, error) {
// 	panic(fmt.Errorf("not implemented: Book - book"))
// }

// // Users is the resolver for the users field.
// func (r *queryResolver) Users(ctx context.Context) ([]*model.User, error) {
// 	panic(fmt.Errorf("not implemented: Users - users"))
// }

// // User is the resolver for the user field.
// func (r *queryResolver) User(ctx context.Context, id string) (*model.User, error) {
// 	panic(fmt.Errorf("not implemented: User - user"))
// }

// // BooksByAuthor is the resolver for the booksByAuthor field.
// func (r *queryResolver) BooksByAuthor(ctx context.Context, authorID string) ([]*model.Book, error) {
// 	panic(fmt.Errorf("not implemented: BooksByAuthor - booksByAuthor"))
// }

// // BooksBorrow is the resolver for the booksBorrow field.
// func (r *queryResolver) BooksBorrow(ctx context.Context) ([]*model.BooksBorrow, error) {
// 	panic(fmt.Errorf("not implemented: BooksBorrow - booksBorrow"))
// }

// // BooksBorrowHistoryByUser is the resolver for the booksBorrowHistoryByUser field.
// func (r *queryResolver) BooksBorrowHistoryByUser(ctx context.Context, userID string) ([]*model.BooksBorrow, error) {
// 	panic(fmt.Errorf("not implemented: BooksBorrowHistoryByUser - booksBorrowHistoryByUser"))
// }

// // BooksBorrowStatByAuthor is the resolver for the booksBorrowStatByAuthor field.
// func (r *queryResolver) BooksBorrowStatByAuthor(ctx context.Context, authorID string) ([]*model.BorrowStat, error) {
// 	panic(fmt.Errorf("not implemented: BooksBorrowStatByAuthor - booksBorrowStatByAuthor"))
// }

// // Query returns generated.QueryResolver implementation.
// func (r *Resolver) Query() generated.QueryResolver { return &queryResolver{r} }

// type queryResolver struct{ *Resolver }
